// Code generated by the Encore v1.46.16 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://intellitask.io`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

/**
 * Client is an API client for the intellitask-yrr2 Encore application.
 */
export default class Client {
    public readonly auth: auth.ServiceClient
    public readonly chatrooms: chatrooms.ServiceClient
    public readonly chats: chats.ServiceClient
    public readonly eventStreamer: eventStreamer.ServiceClient
    public readonly fileManagement: fileManagement.ServiceClient
    public readonly fuck: fuck.ServiceClient
    public readonly openai: openai.ServiceClient


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        const base = new BaseClient(target, options ?? {})
        this.auth = new auth.ServiceClient(base)
        this.chatrooms = new chatrooms.ServiceClient(base)
        this.chats = new chats.ServiceClient(base)
        this.eventStreamer = new eventStreamer.ServiceClient(base)
        this.fileManagement = new fileManagement.ServiceClient(base)
        this.fuck = new fuck.ServiceClient(base)
        this.openai = new openai.ServiceClient(base)
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: auth.AuthParams | AuthDataGenerator
}

export namespace auth {
    export interface AuthData {
        userID: string
        session: types.CustomSession
        user: any
    }

    export interface AuthParams {
        cookie?: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        public async authRouter(method: "GET" | "POST" | "PATCH" | "PUT" | "DELETE" | "HEAD" | "OPTIONS" | "TRACE", _params: string[], body?: BodyInit, options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/api/auth/${_params.map(encodeURIComponent).join("/")}`, body, options)
        }

        public async getIfUserHasActiveOrganization(): Promise<{
    data: {
        hasActiveOrganization: boolean
    }
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/organizations/has-active`)
            return await resp.json() as {
    data: {
        hasActiveOrganization: boolean
    }
}
        }

        public async getOrganizationInvitationsByEmail(): Promise<{
    data: types.InvitationDto[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/organizations/invitations`)
            return await resp.json() as {
    data: types.InvitationDto[]
}
        }

        public async getOrganizationsAttendedByUser(): Promise<{
    data: types.Organization[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/organizations/attended-by-user`)
            return await resp.json() as {
    data: types.Organization[]
}
        }

        public async handler(): Promise<AuthData> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/authorize`)
            return await resp.json() as AuthData
        }
    }
}

export namespace chatrooms {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * This API endpoint is used to add a member to a teamspace.
         */
        public async addTeamspaceMember(teamspaceId: string, params: types.TeamspaceMemberRequest): Promise<{
    data: types.TeamspaceMember
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/teamspaces/${encodeURIComponent(teamspaceId)}/members`, JSON.stringify(params))
            return await resp.json() as {
    data: types.TeamspaceMember
}
        }

        public async changeProjectMemberStatus(id: string, memberId: string, params: {
    kickStatus: boolean
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/projects/${encodeURIComponent(id)}/kick-member/${encodeURIComponent(memberId)}`, JSON.stringify(params))
        }

        public async changeTeamspaceMemberStatus(id: string, memberId: string, params: {
    kickStatus: boolean
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/teamspaces/${encodeURIComponent(id)}/kick-member/${encodeURIComponent(memberId)}`, JSON.stringify(params))
        }

        /**
         * This API endpoint is used to create a chatroom.
         */
        public async createChatroom(params: types.ChatroomRequest): Promise<{
    data: types.ChatroomDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/chatrooms`, JSON.stringify(params))
            return await resp.json() as {
    data: types.ChatroomDto
}
        }

        /**
         * This API endpoint is used to create a project.
         */
        public async createProject(params: types.ProjectRequest): Promise<{
    data: types.ProjectDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/projects`, JSON.stringify(params))
            return await resp.json() as {
    data: types.ProjectDto
}
        }

        /**
         * This API endpoint is used to create a teamspace.
         */
        public async createTeamspace(params: types.TeamspaceRequest): Promise<{
    data: types.TeamspaceDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/teamspaces`, JSON.stringify(params))
            return await resp.json() as {
    data: types.TeamspaceDto
}
        }

        /**
         * This API endpoint is used to delete a chatroom.
         */
        public async deleteChatroom(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/chatrooms/${encodeURIComponent(id)}`)
        }

        public async deleteOneChatroomFile(params: {
    fileId: string
}): Promise<{
    data: types.FileRelation
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                fileId: params.fileId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/files/chatroom`, undefined, {query})
            return await resp.json() as {
    data: types.FileRelation
}
        }

        public async deleteOneProjectFile(params: {
    fileId: string
    projectId: string
}): Promise<{
    data: types.FileRelation
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                fileId:    params.fileId,
                projectId: params.projectId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/files/project`, undefined, {query})
            return await resp.json() as {
    data: types.FileRelation
}
        }

        public async deleteOneTeamspaceFile(params: {
    fileId: string
}): Promise<{
    data: types.FileRelation
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                fileId: params.fileId,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("DELETE", `/files/teamspace`, undefined, {query})
            return await resp.json() as {
    data: types.FileRelation
}
        }

        /**
         * This API endpoint is used to delete a project.
         */
        public async deleteProject(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/projects/${encodeURIComponent(id)}`)
        }

        /**
         * This API endpoint is used to delete a teamspace.
         */
        public async deleteTeamspace(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/teamspaces/${encodeURIComponent(id)}`)
        }

        /**
         * This API endpoint is used to get a chatroom by ID.
         */
        public async getChatroom(id: string): Promise<{
    data: types.ChatroomDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/chatrooms/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: types.ChatroomDto
}
        }

        /**
         * This API endpoint is used to get participating chatrooms
         */
        public async getParticipatingChatroomsWithLatestMessages(): Promise<{
    data: types.ChatroomDto[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/chatrooms/participating`)
            return await resp.json() as {
    data: types.ChatroomDto[]
}
        }

        public async getParticipatingTeamspaces(): Promise<{
    data: types.TeamspaceDto[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/teamspaces/participating`)
            return await resp.json() as {
    data: types.TeamspaceDto[]
}
        }

        /**
         * This API endpoint is used to get a project by ID.
         */
        public async getProject(id: string): Promise<{
    data: types.ProjectDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/projects/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: types.ProjectDto
}
        }

        /**
         * This API endpoint is used to get all projects for a teamspace.
         */
        public async getProjects(teamspaceId: string): Promise<{
    data: types.ProjectDto[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/teamspaces/${encodeURIComponent(teamspaceId)}/projects`)
            return await resp.json() as {
    data: types.ProjectDto[]
}
        }

        /**
         * This API endpoint is used to get a teamspace by ID.
         */
        public async getTeamspace(id: string): Promise<{
    data: types.TeamspaceDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/teamspaces/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: types.TeamspaceDto
}
        }

        /**
         * This API endpoint is used to get all members for a teamspace.
         */
        public async getTeamspaceMembers(teamspaceId: string): Promise<{
    data: types.TeamspaceMember[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/teamspaces/${encodeURIComponent(teamspaceId)}/members`)
            return await resp.json() as {
    data: types.TeamspaceMember[]
}
        }

        /**
         * This API endpoint is used to get all teamspaces for the current organization.
         */
        public async getTeamspaces(): Promise<{
    data: types.TeamspaceDto[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/teamspaces`)
            return await resp.json() as {
    data: types.TeamspaceDto[]
}
        }

        /**
         * This API endpoint is used to get all projects the current user has access to.
         */
        public async getUserProjects(): Promise<{
    data: types.ProjectDto[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/user/projects`)
            return await resp.json() as {
    data: types.ProjectDto[]
}
        }

        /**
         * This API endpoint is used to remove a member from a teamspace.
         */
        public async removeTeamspaceMember(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/teamspaces/members/${encodeURIComponent(id)}`)
        }

        /**
         * This API endpoint is used to update a chatroom.
         */
        public async updateChatroom(id: string, params: {
    chatroomCreatorId: string
    name: string
    type: types.ChatroomType
    projectId?: string
    isPrivate?: boolean
    chatroomMembers: types.ChatroomMemberRequest[]
    teamIds: string[]
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/chatrooms/${encodeURIComponent(id)}`, JSON.stringify(params))
        }

        /**
         * This API endpoint is used to update a project.
         */
        public async updateProject(id: string, params: {
    teamspaceId?: string
    name?: string
    description?: string
    context?: string
    creatorId?: string
    isPrivate?: boolean
    members?: types.ProjectMemberRequest[]
}): Promise<{
    data: types.ProjectDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("PATCH", `/api/projects/${encodeURIComponent(id)}`, JSON.stringify(params))
            return await resp.json() as {
    data: types.ProjectDto
}
        }

        /**
         * This API endpoint is used to update a teamspace.
         */
        public async updateTeamspace(id: string, params: {
    name: string
    description?: string
    context?: string
    creatorId: string
    members: types.TeamspaceMemberRequest[]
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/teamspaces/${encodeURIComponent(id)}`, JSON.stringify(params))
        }

        /**
         * This API endpoint is used to update a teamspace member.
         */
        public async updateTeamspaceMember(id: string, params: {
    teamspaceId?: string
    userId?: string
    hasLeft?: boolean
    role?: types.MemberRole
    invitedByUserId?: string
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/teamspaces/members/${encodeURIComponent(id)}`, JSON.stringify(params))
        }
    }
}

export namespace chats {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        public async chat(params: api.HandshakeRequest): Promise<StreamInOut<types.ChunkDataRequest, types.ChunkDataResponse>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                chatroomId: params.chatroomId,
                userId:     params.userId,
            })

            return await this.baseClient.createStreamInOut(`/api/chat`, {query})
        }

        public async createChatMessageReactions(params: types.ReactionRequest): Promise<{
    data: types.Reaction
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/chatmessage-reactions`, JSON.stringify(params))
            return await resp.json() as {
    data: types.Reaction
}
        }

        public async deleteChatMessageReaction(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/chatmessage-reactions/${encodeURIComponent(id)}`)
        }

        public async updateChatMessageReaction(id: string, params: {
    /**
     * The ID of the user who reacted to the message.
     */
    userId: string

    /**
     * The ID of the message to react to
     */
    messageId: string

    /**
     * The type of reaction (e.g., like, love, haha).
     */
    type: types.ReactionType

    /**
     * The IDs of the users who should receive the reaction
     */
    receiverIds: string[]
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/chatmessage-reactions/${encodeURIComponent(id)}`, JSON.stringify(params))
        }
    }
}

export namespace eventStreamer {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        public async eventsStream(): Promise<StreamIn<{
    receiverIds: string[]
    notification: types.SpecificNotificationEvent
    initializerId: string
    organizationId: string
}>> {
            return await this.baseClient.createStreamIn(`/api/events`)
        }

        public async stats(userId: string): Promise<void> {
            await this.baseClient.callTypedAPI("GET", `/stats/${encodeURIComponent(userId)}`)
        }
    }
}

export namespace fileManagement {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        public async deleteOneFile(fileId: string, params: {
    organizationId: string
}): Promise<void> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                organizationId: params.organizationId,
            })

            await this.baseClient.callTypedAPI("DELETE", `/files/${encodeURIComponent(fileId)}`, undefined, {query})
        }

        /**
         * Get files by their ids
         */
        public async getFilesByIds(params: {
    /**
     * Get files by their ids
     */
    fileIds: string[]
}): Promise<{
    data: types.FileDto[]
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                fileIds: params.fileIds.map((v) => v),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/files`, undefined, {query})
            return await resp.json() as {
    data: types.FileDto[]
}
        }

        /**
         * Raw endpoint for uploading multiple files with metadata in the request body.
         * This is a more modern approach where the file and metadata are sent in a multipart/form-data request.
         */
        public async uploadFilesWithMetadata(method: "POST", body?: BodyInit, options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/api/upload-with-metadata`, body, options)
        }
    }
}

export namespace fuck {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        public async createAgent(params: types.AgentRequest): Promise<{
    data: types.AgentWithRelationsDTO
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/agents`, JSON.stringify(params))
            return await resp.json() as {
    data: types.AgentWithRelationsDTO
}
        }

        public async createConfigProfile(params: types.ConfigProfileRequest): Promise<{
    data: types.ConfigProfile
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/config-profile`, JSON.stringify(params))
            return await resp.json() as {
    data: types.ConfigProfile
}
        }

        public async createInstructionSet(params: types.InstructionSetRequest): Promise<{
    data: types.InstructionSet
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/instruction-set`, JSON.stringify(params))
            return await resp.json() as {
    data: types.InstructionSet
}
        }

        public async createModel(params: types.ModelRequest): Promise<{
    data: types.Model
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/model`, JSON.stringify(params))
            return await resp.json() as {
    data: types.Model
}
        }

        public async createVoiceProfile(params: types.VoiceProfileRequest): Promise<{
    data: types.VoiceProfile
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/api/voice-profile`, JSON.stringify(params))
            return await resp.json() as {
    data: types.VoiceProfile
}
        }

        public async deleteAgent(params: {
    id: string
}): Promise<void> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                id: params.id,
            })

            await this.baseClient.callTypedAPI("DELETE", `/api/agents:id`, undefined, {query})
        }

        public async deleteConfigProfile(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/config-profile/${encodeURIComponent(id)}`)
        }

        public async deleteInstructionSet(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/instruction-set/${encodeURIComponent(id)}`)
        }

        public async deleteModel(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/model/${encodeURIComponent(id)}`)
        }

        public async deleteVoiceProfile(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/api/voice-profile/${encodeURIComponent(id)}`)
        }

        public async getAgent(params: {
    id: string
}): Promise<{
    data: types.AgentWithRelationsDTO
}> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                id: params.id,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/agents:id`, undefined, {query})
            return await resp.json() as {
    data: types.AgentWithRelationsDTO
}
        }

        public async getConfigProfile(id: string): Promise<{
    data: types.ConfigProfile
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/config-profile/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: types.ConfigProfile
}
        }

        public async getInstructionSet(id: string): Promise<{
    data: types.InstructionSet
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/instruction-set/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: types.InstructionSet
}
        }

        public async getModel(id: string): Promise<{
    data: types.Model
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/model/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: types.Model
}
        }

        public async getModels(): Promise<{
    data: types.Model[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/models`)
            return await resp.json() as {
    data: types.Model[]
}
        }

        public async getModelsByProvider(provider: string): Promise<{
    data: types.Model[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/models/provider/${encodeURIComponent(provider)}`)
            return await resp.json() as {
    data: types.Model[]
}
        }

        public async getPublicAgents(): Promise<{
    data: types.AgentWithRelationsDTO[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/agents`)
            return await resp.json() as {
    data: types.AgentWithRelationsDTO[]
}
        }

        public async getPublicConfigProfiles(): Promise<{
    data: types.ConfigProfile[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/config-profiles`)
            return await resp.json() as {
    data: types.ConfigProfile[]
}
        }

        public async getPublicInstructionSets(): Promise<{
    data: types.InstructionSet[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/instruction-sets`)
            return await resp.json() as {
    data: types.InstructionSet[]
}
        }

        public async getVoiceProfile(id: string): Promise<{
    data: types.VoiceProfile
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/voice-profile/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: types.VoiceProfile
}
        }

        public async getVoiceProfiles(): Promise<{
    data: types.VoiceProfile[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/api/voice-profiles`)
            return await resp.json() as {
    data: types.VoiceProfile[]
}
        }

        public async updateAgent(params: {
    /**
     * Reference to the creator of this agent
     */
    creatorId: string

    /**
     * Display name of the agent
     */
    name: string

    /**
     * Optional description of the agent's purpose
     */
    description?: string

    /**
     * Reference to the model to be used
     */
    modelId: string

    /**
     * Reference to the configuration profile
     */
    configId: string

    /**
     * Reference to the instruction set
     */
    instructionSetId: string

    /**
     * Optional reference to the voice profile
     */
    voiceId?: string

    /**
     * Type of agent
     */
    agentType?: types.AgentType

    /**
     * Whether the agent is publicly accessible
     */
    isPublic: boolean

    /**
     * Whether the agent is active
     */
    isActive?: boolean

    /**
     * IDs of functions to associate with this agent
     */
    functionIds?: string[]

    id: string
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/agents:id`, JSON.stringify(params))
        }

        public async updateConfigProfile(id: string, params: {
    name: string
    description?: string
    temperature?: number
    topP?: number
    presencePenalty?: number
    frequencyPenalty?: number
    additionalSettings?: { [key: string]: any }
    creatorId: string
    isPublic: boolean
    isActive?: boolean
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/config-profile/${encodeURIComponent(id)}`, JSON.stringify(params))
        }

        public async updateInstructionSet(id: string, params: {
    name: string
    instructions: string
    creatorId: string
    isPublic: boolean
    isActive?: boolean
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/instruction-set/${encodeURIComponent(id)}`, JSON.stringify(params))
        }

        public async updateModel(id: string, params: {
    name: string
    provider: types.Provider
    apiIdentifier: string
    modelType: types.ModelType
    maxTokens?: number
    isActive?: boolean
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/model/${encodeURIComponent(id)}`, JSON.stringify(params))
        }

        public async updateVoiceProfile(id: string, params: {
    name: string
    provider: types.Provider
    voiceId: string
    settings?: { [key: string]: any }
    isActive?: boolean
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/api/voice-profile/${encodeURIComponent(id)}`, JSON.stringify(params))
        }
    }
}

export namespace openai {
    export interface AgentEphemeral {
        /**
         * Unique identifier for the ephemeral agent
         */
        id: string

        /**
         * Type of object being represented
         */
        object: string

        /**
         * The AI model being used (e.g., GPT-4)
         */
        model: string

        /**
         * List of supported interaction modes (text, audio, etc.)
         */
        modalities: string[]

        /**
         * System instructions that guide the agent's behavior
         */
        instructions: string

        /**
         * Voice ID used for text-to-speech conversion
         */
        voice: string

        /**
         * Format specification for incoming audio (e.g., mp3, wav)
         */
        "input_audio_format": string

        /**
         * Format specification for outgoing audio
         */
        "output_audio_format": string

        /**
         * Configuration settings for speech-to-text conversion
         */
        "input_audio_transcription": {
            /**
             * Model used for audio transcription
             */
            model: string
        }

        /**
         * Configuration for detecting conversation turns (currently unused)
         */
        "turn_detection": null

        /**
         * List of available tools/functions the agent can utilize
         */
        tools: string[]

        /**
         * Strategy specification for how the agent selects tools
         */
        "tool_choice": string

        /**
         * Controls randomness in agent responses (0-1)
         */
        temperature: number

        /**
         * Maximum token limit for agent responses
         */
        "max_response_output_tokens": number

        /**
         * Temporary authentication credentials
         */
        "client_secret": {
            /**
             * Secret token for authentication
             */
            value: string

            /**
             * Timestamp when the token expires
             */
            "expires_at": number
        }
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * This API provides endpoints to interact with the Communication Coach, a conversational AI model that can provide real-time guidance on professional communication and presentation skills.
         */
        public async getCommunicationCoach(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/communication-coach`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Data Analyst, a conversational AI model that can provide real-time guidance on data interpretation and business intelligence.
         */
        public async getDataAnalyst(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/data-analyst`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Financial Advisor, a conversational AI model that can provide real-time financial planning and business finance guidance.
         */
        public async getFinancialAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/financial-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the HR Consultant, a conversational AI model that can provide real-time guidance on human resources issues and workplace culture.
         */
        public async getHRConsultant(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/hr-consultant`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Innovation Consultant, a conversational AI model that can provide real-time guidance on creative problem-solving and innovation methodologies.
         */
        public async getInnovationConsultant(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/innovation-consultant`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Legal Advisor, a conversational AI model that can provide real-time guidance on business law and compliance matters.
         */
        public async getLegalAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/legal-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Marketing Advisor, a conversational AI model that can provide real-time marketing advice and strategic recommendations.
         */
        public async getMarketingAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/marketing-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Productivity Coach, a conversational AI model that can provide real-time productivity advice and time management strategies.
         */
        public async getProductivityCoach(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/productivity-coach`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Project Manager, a conversational AI model that can provide real-time project planning and organizational expertise.
         */
        public async getProjectManager(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/project-manager`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Supervisor, a conversational AI model that can provide real-time assistance and guidance on routing users to the appropriate expert.
         */
        public async getSupervisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/supervisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Tech Advisor, a conversational AI model that can provide real-time IT solutions and technical guidance for various technology challenges.
         */
        public async getTechAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/tech-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Wellness Coach, a conversational AI model that can provide real-time guidance on workplace wellness and stress management.
         */
        public async getWellnessCoach(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/wellness-coach`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API endpoint provides streaming chat functionality using OpenAI's GPT-3.5 Turbo model.
         * It processes messages sent by the client and returns a smoothly streamed response.
         */
        public async openaiStream(method: "POST", body?: BodyInit, options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/stream-chat`, body, options)
        }
    }
}

export namespace api {
    export interface HandshakeRequest {
        userId: string
        chatroomId: string
    }
}

export namespace types {
    export type Access = "NONE" | "VIEW" | "EDIT"

    export interface AgentFunction {
        /**
         * Unique identifier for the function
         */
        id: string

        /**
         * Name of the function used for invocation
         */
        name: string

        /**
         * Human-readable description of the function's purpose
         */
        description: string

        /**
         * Schema defining the function's parameters
         */
        parameters: { [key: string]: any }

        /**
         * Reference to the creator of this function
         */
        creatorId: string

        /**
         * Indicates if the function is available for public use
         */
        isPublic: boolean

        /**
         * Indicates if the function is currently active
         */
        isActive: boolean

        /**
         * When the function was created
         */
        createdAt: string

        /**
         * When the function was last modified
         */
        updatedAt: string
    }

    export interface AgentRequest {
        /**
         * Reference to the creator of this agent
         */
        creatorId: string

        /**
         * Display name of the agent
         */
        name: string

        /**
         * Optional description of the agent's purpose
         */
        description?: string

        /**
         * Reference to the model to be used
         */
        modelId: string

        /**
         * Reference to the configuration profile
         */
        configId: string

        /**
         * Reference to the instruction set
         */
        instructionSetId: string

        /**
         * Optional reference to the voice profile
         */
        voiceId?: string

        /**
         * Type of agent
         */
        agentType?: AgentType

        /**
         * Whether the agent is publicly accessible
         */
        isPublic: boolean

        /**
         * Whether the agent is active
         */
        isActive?: boolean

        /**
         * IDs of functions to associate with this agent
         */
        functionIds?: string[]
    }

    export type AgentType = "general" | "custom_agent"

    export interface AgentWithRelationsDTO {
        /**
         * Model used by this agent
         */
        model: Model

        /**
         * Configuration profile
         */
        config: ConfigProfile

        /**
         * Instruction set
         */
        instructionSet: InstructionSet

        /**
         * Optional voice profile
         */
        voice?: VoiceProfile

        /**
         * List of functions that the agent can call
         */
        functions: AgentFunction[]

        /**
         * Unique identifier for the agent
         */
        id: string

        /**
         * Display name of the agent
         */
        name: string

        /**
         * Optional description of the agent's purpose
         */
        description: string

        /**
         * Reference to the user who created the agent
         */
        creatorId: string

        /**
         * Reference to the model used by this agent
         */
        modelId: string

        /**
         * Reference to the configuration profile
         */
        configId: string

        /**
         * Reference to the instruction set
         */
        instructionSetId: string

        /**
         * Optional reference to the voice profile
         */
        voiceId: string | null

        /**
         * Type of agent
         */
        agentType: AgentType

        /**
         * Whether the agent is publicly accessible
         */
        isPublic: boolean

        /**
         * Whether the agent is active
         */
        isActive: boolean

        /**
         * When the agent was created
         */
        createdAt: string

        /**
         * When the agent was last modified
         */
        updatedAt: string
    }

    export interface AllowedUserAccessDto {
        id: string
        user: UserDto
        access: Access
        createdAt: string
        updatedAt: string
    }

    export interface Attachment {
        /**
         * The type of attachment (e.g., image, file, video).
         */
        type: AttachmentType

        /**
         * The URL to the attachment file.
         */
        url: string

        /**
         * Optional thumbnail URL for images or videos.
         */
        thumbnailUrl?: string
    }

    export type AttachmentType = "image" | "file" | "video"

    export interface ChatMessage {
        /**
         * Unique identifier for the chat message.
         */
        id: string

        /**
         * The identifier of the chatroom where the message was sent.
         */
        chatroomId: string

        /**
         * The index of the message within the chatroom.
         */
        messageIndex: number

        /**
         * Is this message AI generated
         */
        isAiGenerated: boolean

        /**
         * Has message been flagged deleted
         */
        isDeleted: boolean

        /**
         * The identifier of the user who sent the message.
         */
        senderId: string

        /**
         * JSON column to store edit history
         */
        edits: ChatMessageEdits[]

        /**
         * The text content of the message. This can be null if the message only contains media.
         */
        content: string

        /**
         * The type of the message
         */
        reasoning: string

        /**
         * Optional reference to a parent message if this is a reply.
         */
        parentMessageId?: string | null

        /**
         * Indicates if this message is the start of a thread.
         */
        isThreadStarter: boolean

        /**
         * Count of messages in the thread started by this message.
         */
        threadMessageIndex: number

        /**
         * Timestamp of the last message in the thread.
         */
        lastThreadMessageAt?: string | null

        /**
         * Array of attachments associated with the message.
         */
        attachments: Attachment[]

        /**
         * Array of reactions associated with the message.
         */
        reactions: Reaction[]

        /**
         * Thread messages if this is a thread starter.
         */
        threadMessages?: ChatMessage[]

        /**
         * Sources for AI-generated content
         */
        sources?: Source[]

        /**
         * The timestamp when the message was created.
         */
        createdAt: string

        /**
         * The timestamp when the message was last updated.
         */
        updatedAt: string
    }

    export interface ChatMessageEdits {
        /**
         * The new content of the message which was edited
         */
        content: string

        /**
         * The timestamp when the message was edited
         */
        editedAt: string
    }

    export interface ChatMessageRequest {
        chatroomId: string
        senderId: string
        content: string
        reasoning: string
        parentMessageId?: string | null
        isThreadStarter?: boolean
        isAiGenerated?: boolean
        isReasoning?: boolean
        attachments?: Attachment[]
        sources?: Source[]
    }

    export interface ChatroomDto {
        id: string
        type: ChatroomType
        chatroomCreatorId: string
        projectId?: string
        isPrivate: boolean
        messages: ChatMessage[]
        agents: AgentWithRelationsDTO[]
        files: FileDto[]
        name: string
        members: ChatroomMemberDto[]
        createdAt: string
        updatedAt: string
    }

    export interface ChatroomMemberDto {
        id: string
        chatroomId: string
        user: UserDto
        role: ChatroomRole
        hasLeft: boolean
        joinedAt: string
        createdAt: string
        updatedAt: string
    }

    export interface ChatroomMemberRequest {
        chatroomId: string
        userId: string
        role?: ChatroomRole
        hasLeft?: boolean
    }

    export interface ChatroomRequest {
        chatroomCreatorId: string
        name: string
        type: ChatroomType
        projectId?: string
        isPrivate?: boolean
        chatroomMembers: ChatroomMemberRequest[]
        teamIds: string[]
    }

    export type ChatroomRole = "ADMIN" | "MANAGER" | "PROMPT_AIS" | "WRITE" | "READ"

    export type ChatroomType = "CHATROOM" | "PROJECT_CHATROOM" | "AGENT_CONFIG_SPACE"

    export interface ChunkDataRequest {
        identifier: string
        data: ChatMessageRequest
        startIndex: number
        totalChunks: number
        isLastChunk: boolean
    }

    export interface ChunkDataResponse {
        identifier: string
        data: ChatMessage
        startIndex: number
        totalChunks: number
        isLastChunk: boolean
    }

    export interface ConfigProfile {
        /**
         * Unique identifier for the config
         */
        id: string

        /**
         * Name of the configuration
         */
        name: string

        /**
         * Description of the configuration
         */
        description: string

        /**
         * Temperature setting (controls randomness)
         */
        temperature: number

        /**
         * Top P setting
         */
        topP: number

        /**
         * Presence penalty
         */
        presencePenalty: number

        /**
         * Frequency penalty
         */
        frequencyPenalty: number

        /**
         * Additional model-specific settings
         */
        additionalSettings: { [key: string]: any }

        /**
         * Reference to the user who created the config
         */
        creatorId: string

        /**
         * Whether the config is publicly accessible
         */
        isPublic: boolean

        /**
         * Whether the config is active
         */
        isActive: boolean

        /**
         * When the config was created
         */
        createdAt: string

        /**
         * When the config was last modified
         */
        updatedAt: string
    }

    export interface ConfigProfileRequest {
        name: string
        description?: string
        temperature?: number
        topP?: number
        presencePenalty?: number
        frequencyPenalty?: number
        additionalSettings?: { [key: string]: any }
        creatorId: string
        isPublic: boolean
        isActive?: boolean
    }

    export interface CustomSession {
        id: string
        createdAt: string
        updatedAt: string
        userId: string
        expiresAt: string
        token: string
        activeOrganizationId?: string | null
        activeOrganizationMemberId?: string | null
        activeOrganizationMemberRole?: string | null
        ipAddress?: string | null
        userAgent?: string | null
    }

    export interface FileDto {
        id: string
        uploadedByUser: UserDto
        organizationId: string
        uploadType: UploadType
        fileType: FileType
        fileName: string
        fileUrl: string
        fileSize: number
        allowedUsers: AllowedUserAccessDto[]
        createdAt: string
        updatedAt: string
    }

    export interface FileRelation {
        id: string
        teamspaceId?: string
        projectId?: string
        chatroomId?: string
        fileId: string
        createdAt: string
        updatedAt: string
    }

    export type FileType = "AUDIO" | "CODE" | "DOCUMENT" | "FILE" | "HTML" | "JSON" | "IMAGE" | "MARKDOWN" | "PDF" | "PRESENTATION" | "SPREADSHEET" | "VIDEO" | "UNKNOWN"

    export interface InstructionSet {
        /**
         * Unique identifier for the instruction set
         */
        id: string

        /**
         * Name of the instruction set
         */
        name: string

        /**
         * The actual instructions text
         */
        instructions: string

        /**
         * Reference to the user who created the instruction set
         */
        creatorId: string

        /**
         * Whether the instruction set is publicly accessible
         */
        isPublic: boolean

        /**
         * Whether the instruction set is active
         */
        isActive: boolean

        /**
         * When the instruction set was created
         */
        createdAt: string

        /**
         * When the instruction set was last modified
         */
        updatedAt: string
    }

    export interface InstructionSetRequest {
        name: string
        instructions: string
        creatorId: string
        isPublic: boolean
        isActive?: boolean
    }

    export interface InvitationDto {
        id: string
        inviterId: string
        organization: Organization
        teamId?: string
        email: string
        status: string
        role: string
        expiresAt: string
        createdAt: string
    }

    export type MemberRole = "OWNER" | "ADMIN" | "CONTRIBUTOR" | "VIEWER"

    export interface Model {
        /**
         * Unique identifier for the model
         */
        id: string

        /**
         * Name of the model
         */
        name: string

        /**
         * Provider of the model
         */
        provider: Provider

        /**
         * Identifier used in API calls
         */
        apiIdentifier: string

        /**
         * Type of model
         */
        modelType: ModelType

        /**
         * Maximum tokens the model can process
         */
        maxTokens: number

        /**
         * Whether the model is active
         */
        isActive: boolean

        /**
         * When the model was created
         */
        createdAt: string

        /**
         * When the model was last modified
         */
        updatedAt: string
    }

    export interface ModelRequest {
        name: string
        provider: Provider
        apiIdentifier: string
        modelType: ModelType
        maxTokens?: number
        isActive?: boolean
    }

    export type ModelType = "llm" | "diffusion" | "audio" | "tool"

    export type NotificationHandling = "ACCEPTED" | "CANCELED" | "CREATED" | "DELETED" | "KICKED" | "REJECTED" | "RECEIVED"

    export type NotificationType = "ORGANIZATION_INVITATION" | "ORGANIZATION"

    export interface Organization {
        id: string
        name: string
        slug: string
        logo: string
        metadata: string
        createdAt: string
    }

    export interface OrganizationInvitationNotification {
        memberName: string
        organizationName: string
        notificationType: NotificationType
        notificationHandling: NotificationHandling
    }

    export interface OrganizationKickedMemberNotification {
        kickedMemberUserId: string
        organizationName: string
        notificationType: NotificationType
        notificationHandling: NotificationHandling
    }

    export interface ProjectDto {
        id: string
        teamspaceId: string
        name: string
        description: string
        context: string
        creatorId: string
        isPrivate: boolean
        members: ProjectMemberDto[]
        chatrooms: ChatroomDto[]
        files: FileDto[]
        createdAt: string
        updatedAt: string
    }

    export interface ProjectMemberDto {
        id: string
        projectId: string
        user: UserDto
        role: MemberRole
        invitedByUserId: string
        hasLeft: boolean
        joinedAt: string
        createdAt: string
        updatedAt: string
    }

    export interface ProjectMemberRequest {
        projectId: string
        userId: string
        role: MemberRole
        invitedByUserId: string
        hasLeft?: boolean
    }

    export interface ProjectRequest {
        teamspaceId: string
        name: string
        description?: string
        context?: string
        creatorId: string
        isPrivate?: boolean
        members: ProjectMemberRequest[]
    }

    export type Provider = "openai" | "anthropic" | "elevenlabs" | "google" | "azure" | "xai" | "meta" | "fal" | "mistral" | "together" | "stablediffusion" | "deepseek"

    export interface Reaction {
        /**
         * Unique identifier for the reaction.
         */
        id: string

        /**
         * The type of reaction (e.g., like, love, haha).
         */
        type: ReactionType

        /**
         * The ID of the user who reacted to the message.
         */
        userId: string

        /**
         * The timestamp when the reaction was made.
         */
        createdAt: string

        /**
         * The timestamp, when the reactino was updated
         */
        updatedAt: string
    }

    export interface ReactionRequest {
        /**
         * The ID of the user who reacted to the message.
         */
        userId: string

        /**
         * The ID of the message to react to
         */
        messageId: string

        /**
         * The type of reaction (e.g., like, love, haha).
         */
        type: ReactionType

        /**
         * The IDs of the users who should receive the reaction
         */
        receiverIds: string[]
    }

    export type ReactionType = "like" | "praise" | "love" | "dislike" | "angry" | "sad" | "happy" | "funny"

    export interface Source {
        /**
         * Unique identifier for the source
         */
        id: string

        /**
         * The URL of the source
         */
        url: string

        /**
         * Optional title of the source
         */
        title?: string
    }

    export type SpecificNotificationEvent = OrganizationKickedMemberNotification | OrganizationInvitationNotification

    export interface TeamspaceDto {
        id: string
        name: string
        description: string
        context: string
        creatorId: string
        members: TeamspaceMemberDto[]
        files: FileDto[]
        projects: ProjectDto[]
        createdAt: string
        updatedAt: string
    }

    export interface TeamspaceMember {
        id: string
        teamspaceId: string
        userId: string
        role: MemberRole
        invitedByUserId: string
        hasLeft: boolean
        joinedAt: string
        createdAt: string
        updatedAt: string
    }

    export interface TeamspaceMemberDto {
        id: string
        teamspaceId: string
        user: UserDto
        role: MemberRole
        invitedByUserId: string
        hasLeft: boolean
        joinedAt: string
        createdAt: string
        updatedAt: string
    }

    export interface TeamspaceMemberRequest {
        teamspaceId: string
        userId: string
        hasLeft?: boolean
        role: MemberRole
        invitedByUserId: string
    }

    export interface TeamspaceMemberRequest {
        userId: string
        hasLeft?: boolean
        role: MemberRole
        invitedByUserId: string
    }

    export interface TeamspaceRequest {
        name: string
        description?: string
        context?: string
        creatorId: string
        members: TeamspaceMemberRequest[]
    }

    export type UploadType = "DOCUMENT" | "MEDIA"

    export interface UserDto {
        id: string
        name: string
        email: string
        image: string
        role: string
        createdAt: string
    }

    export interface VoiceProfile {
        /**
         * Unique identifier for the voice profile
         */
        id: string

        /**
         * Name of the voice profile
         */
        name: string

        /**
         * Provider of the voice
         */
        provider: Provider

        /**
         * Provider-specific voice ID
         */
        voiceId: string

        /**
         * Additional provider-specific settings
         */
        settings: { [key: string]: any }

        /**
         * Whether the voice profile is active
         */
        isActive: boolean

        /**
         * When the voice profile was created
         */
        createdAt: string

        /**
         * When the voice profile was last modified
         */
        updatedAt: string
    }

    export interface VoiceProfileRequest {
        name: string
        provider: Provider
        voiceId: string
        settings?: { [key: string]: any }
        isActive?: boolean
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | auth.AuthParams
  | Promise<auth.AuthParams | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if ( typeof globalThis === "object" && !("window" in globalThis) ) {
            this.headers["User-Agent"] = "intellitask-yrr2-Generated-TS-Client (Encore/v1.46.16)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: auth.AuthParams | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                cookie: authData.cookie,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: BodyInit, params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: BodyInit, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
