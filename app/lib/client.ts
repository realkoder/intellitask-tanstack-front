// Code generated by the Encore v1.46.12 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-intellitask-yrr2.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

/**
 * Client is an API client for the intellitask-yrr2 Encore application.
 */
export default class Client {
    public readonly agents: agents.ServiceClient
    public readonly chatrooms: chatrooms.ServiceClient
    public readonly chats: chats.ServiceClient
    public readonly openai: openai.ServiceClient
    public readonly payments: payments.ServiceClient
    public readonly users: users.ServiceClient


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        const base = new BaseClient(target, options ?? {})
        this.agents = new agents.ServiceClient(base)
        this.chatrooms = new chatrooms.ServiceClient(base)
        this.chats = new chats.ServiceClient(base)
        this.openai = new openai.ServiceClient(base)
        this.payments = new payments.ServiceClient(base)
        this.users = new users.ServiceClient(base)
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    /**
     * Allows you to set the authentication data to be used for each
     * request either by passing in a static object or by passing in
     * a function which returns a new object for each request.
     */
    auth?: auth.AuthParams | AuthDataGenerator
}

export namespace agents {
    export interface AgentFunction {
        /**
         * Unique identifier for the function
         */
        id: string

        /**
         * Name of the function used for invocation
         */
        name: string

        /**
         * Human-readable description of the function's purpose
         */
        description: string

        /**
         * Schema defining the function's parameters
         */
        parameters: { [key: string]: any }

        /**
         * Indicates if the function is available for public use
         */
        isPublic: boolean

        /**
         * When the agent was created
         */
        createdAt: string

        /**
         * When the agent was last modified
         */
        updatedAt: string
    }

    export interface AgentRequest {
        /**
         * The Creators Id
         */
        creatorId?: string

        /**
         * Display name of the agent
         */
        name: string

        /**
         * Optional description of the agent's purpose
         */
        description?: string | null

        /**
         * System instructions that define the agent's behavior
         */
        instructions: string

        /**
         * AI model used by this agent
         */
        model: string

        /**
         * Voice ID for text-to-speech, limited to specific options
         */
        voice: AgentVoice

        /**
         * Controls randomness in agent responses (0-1)
         */
        temperature: number

        /**
         * Is the agent public ?
         */
        isPublic: boolean
    }

    export interface AgentRequest {
        /**
         * The Creators Id
         */
        creatorId?: string

        /**
         * Display name of the agent
         */
        name: string

        /**
         * Optional description of the agent's purpose
         */
        description?: string | null

        /**
         * System instructions that define the agent's behavior
         */
        instructions: string

        /**
         * AI model used by this agent
         */
        model: string

        /**
         * Voice ID for text-to-speech, limited to specific options
         */
        voice: AgentVoice

        /**
         * Controls randomness in agent responses (0-1)
         */
        temperature: number

        /**
         * Is the agent public ?
         */
        isPublic: boolean
    }

    export type AgentVoice = "alloy" | "ash" | "ballad" | "coral" | "echo" | "sage" | "shimmer" | "verse"

    export interface AgentWithFunctionsDTO {
        /**
         * List of functions that the agent can call
         */
        functions: AgentFunction[]

        /**
         * Unique identifier for the agent
         */
        id: string

        /**
         * Reference to the user who created the agent
         */
        creatorId: string

        /**
         * Display name of the agent
         */
        name: string

        /**
         * Optional description of the agent's purpose
         */
        description: string | null

        /**
         * System instructions that define the agent's behavior
         */
        instructions: string

        /**
         * AI model used by this agent
         */
        model: string

        /**
         * Voice ID for text-to-speech, limited to specific options
         */
        voice: AgentVoice

        /**
         * Controls randomness in agent responses (0-1)
         */
        temperature: number

        /**
         * Is the agent public ?
         */
        isPublic: boolean

        /**
         * When the agent was created
         */
        createdAt: string

        /**
         * When the agent was last modified
         */
        updatedAt: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        public async createAgent(params: AgentRequest): Promise<AgentWithFunctionsDTO> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/agent`, JSON.stringify(params))
            return await resp.json() as AgentWithFunctionsDTO
        }

        public async deleteAgent(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/agent/${encodeURIComponent(id)}`)
        }

        public async getAgent(id: string): Promise<AgentWithFunctionsDTO> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/agent/${encodeURIComponent(id)}`)
            return await resp.json() as AgentWithFunctionsDTO
        }

        public async getPublicAgents(): Promise<api.GetAgentsResponse> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/agents`)
            return await resp.json() as api.GetAgentsResponse
        }

        public async updateAgent(id: string, params: {
    agent: AgentRequest
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/agent/${encodeURIComponent(id)}`, JSON.stringify(params))
        }
    }
}

export namespace auth {
    export interface AuthParams {
        authorization: string
    }
}

export namespace chatrooms {
    export interface ChatroomDto {
        id: string
        type: ChatroomType
        chatroomCreatorId: string
        name: string
        members: ChatroomMemberDto[]
        createdAt: string
        updatedAt: string
    }

    export interface ChatroomMemberDto {
        id: string
        user: users.User
        role: ChatroomRole
        hasLeft: boolean
        joinedAt: string
        createdAt: string
        updatedAt: string
    }

    export interface ChatroomMemberRequest {
        chatroomId: string
        userId: string
        role: ChatroomRole
    }

    export interface ChatroomRequest {
        chatroomCreatorId: string
        name: string
        type: ChatroomType
        chatroomMembers: ChatroomMemberRequest[]
        teamIds: string[]
    }

    export type ChatroomRole = "ADMIN" | "MANAGER" | "PROMPT_AIS" | "WRITE" | "READ"

    export type ChatroomType = "CHATROOM" | "PROJECT_CHATROOM" | "COMPANY_CHATROOM" | "AGENT_CONFIG_SPACE"

    export interface TeamDto {
        id: string
        name: string
        members: TeamMemberDto[]
        createdAt: string
        updatedAt: string
    }

    export interface TeamMemberDto {
        id: string
        user: users.User
        role: ChatroomRole
        hasLeft: boolean
        joinedAt: string
        createdAt: string
        updatedAt: string
    }

    export interface TeamMemberRequest {
        teamId: string
        userId: string
        role: ChatroomRole
        hasLeft: boolean
    }

    export interface TeamRequest {
        name: string
        members: TeamMemberRequest[]
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * This API endpoint is used to create a chatroom.
         */
        public async createChatroom(params: ChatroomRequest): Promise<{
    data: ChatroomDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/chatrooms`, JSON.stringify(params))
            return await resp.json() as {
    data: ChatroomDto
}
        }

        /**
         * This API endpoint is used to create a team.
         */
        public async createTeam(params: TeamRequest): Promise<{
    data: TeamDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("POST", `/teams`, JSON.stringify(params))
            return await resp.json() as {
    data: TeamDto
}
        }

        /**
         * This API endpoint is used to delete a chatroom.
         */
        public async deleteChatroom(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/chatrooms/${encodeURIComponent(id)}`)
        }

        /**
         * This API endpoint is used to delete a team.
         */
        public async deleteTeam(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/teams/${encodeURIComponent(id)}`)
        }

        /**
         * This API endpoint is used to get a chatroom by ID.
         */
        public async getChatroom(id: string): Promise<{
    data: ChatroomDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/chatrooms/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: ChatroomDto
}
        }

        /**
         * This API endpoint is used to get all chatrooms.
         */
        public async getChatrooms(): Promise<{
    data: ChatroomDto[]
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/chatrooms`)
            return await resp.json() as {
    data: ChatroomDto[]
}
        }

        /**
         * This API endpoint is used to find a team by ID.
         */
        public async getTeam(id: string): Promise<{
    data: TeamDto
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/teams/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: TeamDto
}
        }

        /**
         * This API endpoint is used to update a chatroom.
         */
        public async updateChatroom(id: string, params: {
    chatroomCreatorId: string
    name: string
    type: ChatroomType
    chatroomMembers: ChatroomMemberRequest[]
    teamIds: string[]
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/chatrooms/${encodeURIComponent(id)}`, JSON.stringify(params))
        }

        /**
         * This API endpoint is used to update a team.
         */
        public async updateTeam(id: string, params: {
    name: string
    members: TeamMemberRequest[]
}): Promise<void> {
            await this.baseClient.callTypedAPI("PATCH", `/teams/${encodeURIComponent(id)}`, JSON.stringify(params))
        }
    }
}

export namespace chats {
    export interface Attachment {
        /**
         * The type of attachment (e.g., image, file, video).
         */
        type: "image" | "file" | "video"

        /**
         * The URL to the attachment file.
         */
        url: string

        /**
         * Optional thumbnail URL for images or videos.
         */
        thumbnailUrl?: string

        /**
         * Additional metadata associated with the attachment.
         */
        meta?: { [key: string]: any }
    }

    export interface ChatMessage {
        /**
         * Unique identifier for the chat message.
         */
        id: string

        /**
         * The identifier of the chatroom where the message was sent.
         */
        chatroomId: string

        /**
         * The identifier of the user who sent the message.
         */
        senderId: string

        /**
         * The type of the chat message (text, media, or system).
         */
        kind: ChatMessageKind

        /**
         * The text content of the message. This can be null if the message only contains media.
         */
        content: string

        /**
         * Optional reference to a parent message if this is a reply.
         */
        parentMessageId?: string | null

        /**
         * Array of attachments associated with the message.
         */
        attachments: Attachment[]

        /**
         * Array of reactions associated with the message.
         */
        reactions: Reaction[]

        /**
         * The timestamp when the message was created.
         */
        createdAt: string | null

        /**
         * The timestamp when the message was last updated.
         */
        updatedAt: string | null
    }

    export type ChatMessageKind = "text" | "media" | "system"

    export interface ChatMessageRequest {
        chatroomId: string
        senderId: string
        kind: ChatMessageKind
        content: string
        parentMessageId?: string | null
        attachments: Attachment[]
        reactions: Reaction[]
    }

    export interface ChunkDataRequest {
        identifier: string
        data: ChatMessageRequest
        startIndex: number
        totalChunks: number
        isLastChunk: boolean
    }

    export interface ChunkDataResponse {
        identifier: string
        data: ChatMessage
        startIndex: number
        totalChunks: number
        isLastChunk: boolean
    }

    export interface Reaction {
        /**
         * The type of reaction (e.g., like, love, haha).
         */
        type: string

        /**
         * The ID of the user who reacted to the message.
         */
        userId: number

        /**
         * The timestamp when the reaction was made.
         */
        createdAt: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        public async chat(params: api.HandshakeRequest): Promise<StreamInOut<ChunkDataRequest, ChunkDataResponse>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                chatroomId: params.chatroomId,
                userId:     params.userId,
            })

            return await this.baseClient.createStreamInOut(`/chat`, {query})
        }
    }
}

export namespace openai {
    export interface AgentEphemeral {
        /**
         * Unique identifier for the ephemeral agent
         */
        id: string

        /**
         * Type of object being represented
         */
        object: string

        /**
         * The AI model being used (e.g., GPT-4)
         */
        model: string

        /**
         * List of supported interaction modes (text, audio, etc.)
         */
        modalities: string[]

        /**
         * System instructions that guide the agent's behavior
         */
        instructions: string

        /**
         * Voice ID used for text-to-speech conversion
         */
        voice: string

        /**
         * Format specification for incoming audio (e.g., mp3, wav)
         */
        "input_audio_format": string

        /**
         * Format specification for outgoing audio
         */
        "output_audio_format": string

        /**
         * Configuration settings for speech-to-text conversion
         */
        "input_audio_transcription": {
            /**
             * Model used for audio transcription
             */
            model: string
        }

        /**
         * Configuration for detecting conversation turns (currently unused)
         */
        "turn_detection": null

        /**
         * List of available tools/functions the agent can utilize
         */
        tools: string[]

        /**
         * Strategy specification for how the agent selects tools
         */
        "tool_choice": string

        /**
         * Controls randomness in agent responses (0-1)
         */
        temperature: number

        /**
         * Maximum token limit for agent responses
         */
        "max_response_output_tokens": number

        /**
         * Temporary authentication credentials
         */
        "client_secret": {
            /**
             * Secret token for authentication
             */
            value: string

            /**
             * Timestamp when the token expires
             */
            "expires_at": number
        }
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * This API provides endpoints to interact with the Communication Coach, a conversational AI model that can provide real-time guidance on professional communication and presentation skills.
         */
        public async getCommunicationCoach(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/communication-coach`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Data Analyst, a conversational AI model that can provide real-time guidance on data interpretation and business intelligence.
         */
        public async getDataAnalyst(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/data-analyst`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Financial Advisor, a conversational AI model that can provide real-time financial planning and business finance guidance.
         */
        public async getFinancialAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/financial-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the HR Consultant, a conversational AI model that can provide real-time guidance on human resources issues and workplace culture.
         */
        public async getHRConsultant(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/hr-consultant`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Innovation Consultant, a conversational AI model that can provide real-time guidance on creative problem-solving and innovation methodologies.
         */
        public async getInnovationConsultant(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/innovation-consultant`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Legal Advisor, a conversational AI model that can provide real-time guidance on business law and compliance matters.
         */
        public async getLegalAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/legal-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Marketing Advisor, a conversational AI model that can provide real-time marketing advice and strategic recommendations.
         */
        public async getMarketingAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/marketing-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Productivity Coach, a conversational AI model that can provide real-time productivity advice and time management strategies.
         */
        public async getProductivityCoach(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/productivity-coach`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Project Manager, a conversational AI model that can provide real-time project planning and organizational expertise.
         */
        public async getProjectManager(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/project-manager`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Supervisor, a conversational AI model that can provide real-time assistance and guidance on routing users to the appropriate expert.
         */
        public async getSupervisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/supervisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Tech Advisor, a conversational AI model that can provide real-time IT solutions and technical guidance for various technology challenges.
         */
        public async getTechAdvisor(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/tech-advisor`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API provides endpoints to interact with the Wellness Coach, a conversational AI model that can provide real-time guidance on workplace wellness and stress management.
         */
        public async getWellnessCoach(): Promise<AgentEphemeral> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/wellness-coach`)
            return await resp.json() as AgentEphemeral
        }

        /**
         * This API endpoint provides streaming chat functionality using OpenAI's GPT-3.5 Turbo model.
         * It processes messages sent by the client and returns a smoothly streamed response.
         */
        public async openaiStream(method: "POST", body?: BodyInit, options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/stream-chat`, body, options)
        }
    }
}

export namespace payments {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * This endpoint is used to cancel a subscription.
         */
        public async cancelSubscription(subscriptionId: string): Promise<void> {
            await this.baseClient.callTypedAPI("POST", `/cancel-subscription/${encodeURIComponent(subscriptionId)}`)
        }

        /**
         * API endpoint to create a new subscription checkout session through Stripe
         */
        public async checkoutStripeSession(method: "POST", tier: string, body?: BodyInit, options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/create-subscription/${encodeURIComponent(tier)}`, body, options)
        }

        /**
         * API endpoint to handle Stripe webhook events
         */
        public async stripeWebhook(method: "POST", body?: BodyInit, options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/stripe-webhook`, body, options)
        }
    }
}

export namespace users {
    export interface User {
        /**
         * Unique identifier for the user
         */
        id: string

        /**
         * User's first name
         */
        firstName: string

        /**
         * User's last name
         */
        lastName: string

        /**
         * User's profile picture URL
         */
        profilePicture: string

        /**
         * User's email address
         */
        email: string

        /**
         * Flag indicating if the user has been soft deleted
         */
        isDeleted: boolean

        /**
         * Timestamp when the user was created
         */
        createdAt: string

        /**
         * Timestamp when the user was last updated
         */
        updatedAt: string
    }

    export interface UserRequest {
        /**
         * User's first name
         */
        firstName: string

        /**
         * User's last name
         */
        lastName: string

        /**
         * User's profile picture URL
         */
        profilePicture: string

        /**
         * User's email address
         */
        email: string
    }

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
        }

        /**
         * This endpoint is used to create a user when a webhook is received from Clerk.
         * The webhook is sent when a user is created in Clerk.
         * To use this endpoint, you need to create a webhook in Clerk and set the URL to this endpoint.
         * For testing, you can use a tunnel tool like ngrok to expose your local server to the internet, or other similar tools.
         * 
         * The webhook secret should taken from your clerk backend settings, and is used to ensure the webhook request is authentic.
         */
        public async createUser(method: "POST", body?: BodyInit, options?: CallParameters): Promise<globalThis.Response> {
            return this.baseClient.callAPI(method, `/users`, body, options)
        }

        /**
         * This endpoint is used to delete a user.
         * It requires authentication, so the user must be logged in.
         */
        public async deleteUser(id: string): Promise<void> {
            await this.baseClient.callTypedAPI("DELETE", `/users/${encodeURIComponent(id)}`)
        }

        /**
         * This endpoint is used to get a user by their ID.
         * It is a public endpoint, so it does not require authentication.
         */
        public async findUser(id: string): Promise<{
    data: User
}> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI("GET", `/users/${encodeURIComponent(id)}`)
            return await resp.json() as {
    data: User
}
        }

        /**
         * This endpoint is used to update a user's profile.
         * It requires authentication, so the user must be logged in.
         */
        public async updateUser(id: string, params: UserRequest): Promise<void> {
            await this.baseClient.callTypedAPI("PUT", `/users/${encodeURIComponent(id)}`, JSON.stringify(params))
        }
    }
}

export namespace api {
    export interface GetAgentsResponse {
        agents: agents.AgentWithFunctionsDTO[]
    }

    export interface HandshakeRequest {
        userId: string
        chatroomId: string
    }
}



function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "method" | "body" | "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}

// AuthDataGenerator is a function that returns a new instance of the authentication data required by this API
export type AuthDataGenerator = () =>
  | auth.AuthParams
  | Promise<auth.AuthParams | undefined>
  | undefined;

// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
    readonly authGenerator?: AuthDataGenerator

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if ( typeof globalThis === "object" && !("window" in globalThis) ) {
            this.headers["User-Agent"] = "intellitask-yrr2-Generated-TS-Client (Encore/v1.46.12)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }

        // Setup an authentication data generator using the auth data token option
        if (options.auth !== undefined) {
            const auth = options.auth
            if (typeof auth === "function") {
                this.authGenerator = auth
            } else {
                this.authGenerator = () => auth
            }
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        let authData: auth.AuthParams | undefined;

        // If authorization data generator is present, call it and add the returned data to the request
        if (this.authGenerator) {
            const mayBePromise = this.authGenerator();
            if (mayBePromise instanceof Promise) {
                authData = await mayBePromise;
            } else {
                authData = mayBePromise;
            }
        }

        if (authData) {
            const data: CallParameters = {};

            data.headers = makeRecord<string, string>({
                authorization: authData.authorization,
            });

            return data;
        }

        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(method: string, path: string, body?: BodyInit, params?: CallParameters): Promise<Response> {
        return this.callAPI(method, path, body, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(method: string, path: string, body?: BodyInit, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
            method,
            body: body ?? null,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}
