import{isRedirect as S,isNotFound as x}from"@tanstack/router-core";import T from"tiny-invariant";import{eventHandler as M,toWebRequest as O,getResponseStatus as j,getEvent as I}from"@tanstack/start-server-core";import{startSerializer as u}from"@tanstack/start-client-core";const b={"app_routes_root_tsx--fetchBetterAuth_createServerFn_handler":{functionName:"fetchBetterAuth_createServerFn_handler",importer:()=>import("./assets/__root-qUR5Qwru.js")},"app_routes_authed_tsx--checkExistingOrganization_createServerFn_handler":{functionName:"checkExistingOrganization_createServerFn_handler",importer:()=>import("./assets/_authed-B7p2NkLP.js")},"app_routes_authed_layout_tsx--getTeamspaces_createServerFn_handler":{functionName:"getTeamspaces_createServerFn_handler",importer:()=>import("./assets/_layout-upKjyzAj.js")},"app_routes_authed_layout_tsx--getChatrooms_createServerFn_handler":{functionName:"getChatrooms_createServerFn_handler",importer:()=>import("./assets/_layout-upKjyzAj.js")},"app_routes_authed_layout_chat_chatroomId_tsx--fetchChatroomWithMessages_createServerFn_handler":{functionName:"fetchChatroomWithMessages_createServerFn_handler",importer:()=>import("./assets/_chatroomId-BjOdpLhQ.js")}},$=M(A),d=b;async function A(r){const n=O(r);return await D({request:n,event:r})}function z(r){return r.replace(/^\/|\/$/g,"")}async function D({request:r,event:n}){const a=new AbortController,i=a.signal,_=()=>a.abort();n.node.req.on("close",_);const v=r.method,w=new URL(r.url,"http://localhost:3000"),R=new RegExp(`${z("/_server")}/([^/?#]+)`),g=w.pathname.match(R),o=g?g[1]:null,c=Object.fromEntries(w.searchParams.entries()),h="createServerFn"in c,E="raw"in c;if(typeof o!="string")throw new Error("Invalid server action param for serverFnId: "+o);const m=d[o];if(!m)throw console.log("serverFnManifest",d),new Error("Server function info not found for "+o);let l;if(l=await m.importer(),!l)throw console.log("serverFnManifest",d),new Error("Server function module not resolved for "+o);const s=l[m.functionName];if(!s)throw console.log("serverFnManifest",d),console.log("fnModule",l),new Error(`Server function module export not resolved for serverFn ID: ${o}`);const N=["multipart/form-data","application/x-www-form-urlencoded"],p=await(async()=>{try{let e=await(async()=>{if(r.headers.get("Content-Type")&&N.some(t=>{var F;return(F=r.headers.get("Content-Type"))==null?void 0:F.includes(t)}))return T(v.toLowerCase()!=="get","GET requests with FormData payloads are not supported"),await s(await r.formData(),i);if(v.toLowerCase()==="get"){let t=c;return h&&(t=c.payload),t=t&&u.parse(t),await s(t,i)}const f=await r.text(),y=u.parse(f);return h?await s(y,i):await s(...y,i)})();return e.result instanceof Response?e.result:!h&&(e=e.result,e instanceof Response)?e:S(e)||x(e)?C(e):new Response(e!==void 0?u.stringify(e):void 0,{status:j(I()),headers:{"Content-Type":"application/json"}})}catch(e){return e instanceof Response?e:S(e)||x(e)?C(e):(console.info(),console.info("Server Fn Error!"),console.info(),console.error(e),console.info(),new Response(u.stringify(e),{status:500,headers:{"Content-Type":"application/json"}}))}})();if(n.node.req.removeListener("close",_),E)return p;if(p.headers.get("Content-Type")==="application/json"){const f=await p.clone().text();f&&JSON.stringify(JSON.parse(f))}return p}function C(r){const{headers:n,...a}=r;return new Response(JSON.stringify(a),{status:200,headers:{"Content-Type":"application/json",...n||{}}})}export{$ as default};
